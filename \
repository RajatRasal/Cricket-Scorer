$(document).ready(function(){
	current_data = post();
	console.log('Current data: ', current_data);
	get_and_set_ball_by_ball_player_details(current_data);
	get_and_set_live_stats(get('live_stats','html'));
	// get_and_set_ball_by_ball_stats(current_data);
})

function hide_player_selection_dropdown(){
	// $("#inner-player-selection").hide();
	// document.getElementById("inner-player-selection").css('visibility', 'hidden');
	$("#player-selection").css('visibility', 'hidden'); 
}

function show_player_selection_dropdown(){
	// console.log('show player dropdown');
	// $("#inner-player-selection").show();
	$("#player-selection").css('visibility', 'visible'); 
	// document.getElementById("player-selection").style.visibility = "visible";
	// document.getElementById("inner-player-selection").css('visibility', 'visible');
}

function toggle_player_selection_dropdown(){
	console.log('toggle player dropdown');
	// $("#inner-player-selection").toggle();
}

var current_data = {};

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Live stats displaying functions 

function get_and_set_ball_by_ball_player_details(current_data){
	if (current_data['onstrike'] === null){
		// Gets all possible options for batter 1 from server 
		// side using the get functions which calls AJAX GET request
		$("div#player-selection").html(get('onstrike', 'html'));
		// Displays the selection box where users can pick which 
		// batter should bat next. 
		show_player_selection_dropdown();
		return false;
	} else {
		// This part of the function will be called once the 
		// choose button is pressed from the onclick event
		// handler of that button. 
		$("#batter-1").html(current_data["onstrike"]);
		// Once the value is set, the dropdown box will close.
		hide_player_selection_dropdown();
	}
	if (current_data["offstrike"] === null){
		$("div#player-selection").html(get('offstrike', 'html'));
		// Displays the selection box where users can pick which 
		// batter should bat next. 
		show_player_selection_dropdown();
		return false;
	} else {
		// This part of the function will be called once the 
		// choose button is pressed from the onclick event
		// handler of that button. 
		$("#batter-2").html(current_data["offstrike"]);
		// Once the value is set, the dropdown box will close.
		hide_player_selection_dropdown();
	}
	if (current_data["bowler"] === null){
		$("div#player-selection").html(get('bowler', 'html'));
		// Displays the selection box where users can pick which 
		// batter should bat next. 
		show_player_selection_dropdown()
		return false;
	} else {
		// This part of the function will be called once the 
		// choose button is pressed from the onclick event
		// handler of that button. 
		$("#bowler").html(current_data["bowler"]);
		// Once the value is set, the dropdown box will close.
		hide_player_selection_dropdown();
	}
	console.log(current_data);
	return true;
}

function set_player_names_to_current_ball_data(fieldname){
	current_data[fieldname] = $('#names-list').val();
	get_and_set_ball_by_ball_player_details(current_data);
}

function get_and_set_live_stats(live_data){
	try {
		console.log(live_data);
		$(".current-stats#over").html(String(all_data["over"])+"."+String(all_data["ball_in_over"]));
	} catch (err) {
		console.log(err);
	}
}

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Event handler functions for scoring buttons

// Function used to clear any remaining data left over from the previous 
// delivery which is still stored in the returned JSON.
function clear_details_from_last_ball(){
	console.log('Current data: ', current_data);
	current_data['extras'] = 0;
	current_data['extras_type'] = '';
	current_data['runs'] = 0;
}

// Function decides whether batters will have whiched from onstrike
// to offstrike given the number of runs they have scored.
function swap_batters(number){
	// conditional checks for whether number equals 1,3 or 5
	if ( number % 2 === 1 ){
		// swap player names in current_data object
		current_data["onstrike"] = [current_data["offstrike"], 
			current_data["offstrike"]=current_data["onstrike"]][0];
	}
}

// Below function increments ball count when called. Will be 
// called through the HTML in conjunction with other functions 
// which handle ball by ball events. 
function increment_ball(){
	// increments over
	current_data['ball_in_over'] += 1;
}

function undo(){
	console.log('undo');
}

// Over will only end when function below is called. 
function end_over(){
	console.log('end over');
	// reset ball in over counter
	current_data['ball_in_over'] = 0;
	// increment over counter 
	current_data['over'] += 1;
	// empty bowler name to select another
	current_data['bowler'] = null;
	// swap batters 
	swap_batters(1);
	// calls get to request server for new bowler name
	get_and_set_ball_by_ball_player_details(current_data);
}

function end_innings(){
	// empty batsmen and bowlers
	console.log('end of innings');
	current_data['innings'] = 2;
}

// This function will be called when any of the 0-6 runs buttons 
// on the scoring UI are clicked. It will be called from the 
// 'onclick' event handler and used to set the number of runs 
// scored off a particular ball.
function runs_batting(number){
	console.log('batting runs');
	current_data['runs'] = number;	
	current_data['total_runs'] += number;
	swap_batters(number);
	console.log('Current data: ', current_data);
}

// Prompt box used to confirm the number of extras scored 
// off a delivery if extras have been scored.
function runs_confirmation_box(message){
	// buggy code for testing
	// var extras = parseInt(prompt(message,
	// 	"e.g. 1,2,3,4,5,6").match(/^[123456]$/));
	// console.log(extras); 
	// if (extras === null){	
	//	alert('enter a valid input');
	//	runs_confirmation_box(message);} 
	// return extras;
	var runs = prompt(message,
		"e.g. 1,2,3,4,5,6").match(/^[123456]$/);
	console.log('extras scored: '.concat(runs)); 
	if (runs === null){	
		alert('enter a valid input');
		return runs_confirmation_box(message);} 
	// converting the input from the prompt to an integer
	return parseInt(runs);
}

// This function will be called when any of the buttons in the  
// 'extras' group in the scoring UI are clicked. It will be 
// called from the 'onclick' event handlers in the html for these 
// buttons. Will be used to set the number of extras scored 
// off a particular ball and the type of extras they were.
function extras_bowling(extras_type, runs){
	// event handler for extras type = 'wides' OR 'noballs'
	current_data['extras_type'] = extras_type;
	current_data['extras'] = runs;
	// Will increment the total runs scored tally.
	current_data['total_runs'] += current_data['extras']; 
	// We want batters to swap on even number of extras  
	swap_batters(current_data['extras']-1);
}

function extras_fielding(extras_type){
	// event handler for extra type = 'byes' OR 'legbyes'
	current_data['extras_type'] = extra_type;
	current_data['extras'] = runs_confirmation_box("\
			Confirm the number of extras scored");
	current_data['total_runs'] = current_data['extras']; 
	// We want batters to swap on odd numbers 
	swap_batters(current_data['extras']);
}

function extras_penalties(){
	current_data['extras_type'] = 'penalties';
	current_data['extras'] = 5;
	current_data['total_runs'] += 5; 
	if (confirm("Did batters cross over?") === true){
		swap_batters(1);
	}
}

// buggy short run function
function short_run(runs_taken, runs_short){
	var taken = runs_taken, short = runs_short;
	var scored = taken-short;
	swap_batters(taken);
	current_data['runs'] = scored;
	current_data['total_runs'] += scored;
}

function short_run(){
	var scored = 0;
	while (scored < 1){
		var taken = runs_confirmation_box('How many runs were taken');
		var short = runs_confirmation_box('How many runs were short');
		var scored = taken-short;
		console.log(scored);
		if (scored < 1){alert('Ensure Runs taken < Runs short');}
	}
	swap_batters(taken);
	current_data['runs'] = scored;
	current_data['total_runs'] += scored;
}

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// AJAX Requests or AJAX callers 

$("div#scoring-runs-group button").click(function(){
	console.log('EVENT HANDLER');
	console.log('Current data: ', current_data);
	// AJAX POST is automatically setting the value for the current
	// data onc returned because Javascript is fully pass-by-reference.  
	post(current_data);
	clear_details_from_last_ball();
	get_and_set_ball_by_ball_player_details(current_data)
	get_and_set_live_stats(get('live_stats','html'));
});


function post(query){
	return $.ajax({
		type: 'POST', // AJAX POST request being made
		// 'contentType' specifies to the server data 
		// that the data that will be sent in the 'data' 
		// header will be in JSON format.
		// BUGGY JSON POST 
		// issue here was that the data being sent was not techniclly in
		// JSON format or being read as JSON by Django, so by specifying 
		// this the code would not work as expected.
		// contentType: "application/json; charset=UTF-8", 
		// URL for data to be sent to.
		url: '/get_scores/', 
		// 'data' header is the actual data being sent 
		// Converts all sending data to JSON format using 
		// stringify.
		// data: JSON.stringify(query), 
		data: query, // { json_string: JSON.stringify(query) }, 
		// 'datatype' header parses all returned data as JSON
		// therefore there is no need to convert response to 
		// JSON using JSON.parse().
		dataType: 'json', 
		success: function(response){
			console.log('POST success');
		},
		error: function(jqXHR, textStatus, errorThrown) {
			alert('error ' + textStatus + " " + errorThrown);
		},
		// Turns off asynchronous data transmission so
		// the browser will wait for a reponse before 
		// allowing the code to continue. 
		async: false 
	})['responseJSON'];
}

function get(query, datatype){
	// console.log('QUERY: '.concat(query));
	return $.ajax({
		// default AJAX request type = GET
		// 'contentType' specifies to the server data 
		// that the data that will be sent in the 'data' 
		// header will be in JSON format.
		contentType: "application/json", 
		// URL for data to be sent to.
		url: '/get_scores/', 
		// 'data' header is the actual data being sent 
		// Converts all sending data to JSON format using 
		// stringify.
		data: {'data':query}, 
		// 'datatype' header parses all returned data as JSON
		// therefore there is no need to convert response to 
		// JSON using JSON.parse().
		datatype: datatype, 
		success: function(response){
			console.log('GET successful');
		},
		error: function(jqXHR, textStatus, errorThrown) {
			alert('error ' + textStatus + " " + errorThrown);
		},
		// Turns off asynchronous data transmission so
		// the browser will wait for a reponse before 
		// allowing the code to continue. 
		async: false 
	})['responseJSON'];
}

$("a.twitter-post").click(function(){
	// alert('button clicked');
	// add ajax request here
	$.ajax({
		url: 'http://localhost:9080/',
		dataType: "jsonp",
		jsonpCallback: "callback", // callback parameter
		cache: false,
		timeout: 5000,
		success: function(data) {alert(data);},
		error: function(jqXHR, textStatus, errorThrown) {
			alert('error ' + textStatus + " " + errorThrown);
		}
	});
});
